name: ci

on:
  push:
    branches-ignore:
      - '**-wip'
  pull_request:
  schedule:
    - cron: '0 1 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings
  MIRIFLAGS: -Zmiri-disable-isolation
  RUST_BACKTRACE: full

jobs:
  ci:
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.63.0  # MSRV
        runs_on:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        feature:
          - net-std
          - net-async-std
          - net-tokio
          - net-smol
          - all
          - ''
        include:
          - runs_on: ubuntu-latest
            feature: net-tokio,socket2
            rust: stable
          - runs_on: ubuntu-latest
            feature: net-tokio,socket2
            rust: beta
          - runs_on: ubuntu-latest
            feature: net-tokio,socket2
            rust: 1.63.0  # MSRV
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: actions-rs/cargo@v1
        name: build rsdns
        if: ${{ matrix.feature != 'all' && matrix.feature != '' }}
        with:
          command: build
          args: --no-default-features --features ${{ matrix.feature }}

      - uses: actions-rs/cargo@v1
        name: build all rsdns
        if: ${{ matrix.feature == 'all' }}
        with:
          command: build
          args: --all-features

      - uses: actions-rs/cargo@v1
        name: build no-default-features rsdns
        if: ${{ matrix.feature == '' }}
        with:
          command: build
          args: --no-default-features

      - uses: actions-rs/cargo@v1
        name: test rsdns
        if: ${{ matrix.feature != 'all' && matrix.feature != '' }}
        with:
          command: test
          args: --no-default-features --features ${{ matrix.feature }}

      - uses: actions-rs/cargo@v1
        name: test all rsdns
        if: ${{ matrix.feature == 'all' }}
        with:
          command: test
          args: --all-features

      - uses: actions-rs/cargo@v1
        name: test no-default-features rsdns
        if: ${{ matrix.feature == '' }}
        with:
          command: test
          args: --no-default-features

      - uses: actions-rs/cargo@v1
        name: lint rsdns
        if: ${{ matrix.feature != 'all' && matrix.feature != '' }}
        with:
          command: clippy
          args: --no-default-features --features ${{ matrix.feature }}

      - uses: actions-rs/cargo@v1
        name: lint all rsdns
        if: ${{ matrix.feature == 'all' }}
        with:
          command: clippy
          args: --all-features

      - uses: actions-rs/cargo@v1
        name: lint no-default-features rsdns
        if: ${{ matrix.feature == '' }}
        with:
          command: clippy
          args: --no-default-features

  common-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        name: format all
        with:
          command: fmt
          args: -- --check
      - uses: actions-rs/cargo@v1
        name: doc rsdns
        env:
          RUSTDOCFLAGS: "--cfg docsrs"
        with:
          command: doc
          args: --all-features --no-deps

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - name: install llvm-12
        run: sudo apt install -y llvm-12

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            lines = []
            with open("fuzz/Cargo.toml", "r") as cargo:
                lines = cargo.readlines()

            for i in range(len(lines)):
                if lines[i] == '# path = ".."\n':
                    lines[i] = 'path = ".."\n'
                    print('rsdns path set to ".."')

            with open("fuzz/Cargo.toml", "w") as cargo:
                cargo.write(''.join(lines))
            print('Cargo.toml updated succcessfully')

      - uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: nightly
          override: true
          components: llvm-tools-preview,rust-src

      - uses: actions-rs/cargo@v1
        name: install cargo-fuzz
        with:
          command: install
          args: cargo-fuzz

      - uses: actions-rs/cargo@v1
        name: fuzz rrset_from_msg
        with:
          command: fuzz
          args: run rrset_from_msg -- -max_total_time=5 -verbosity=0

  miri:
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        runs_on:
          - ubuntu-latest
        feature:
          - all
          - ''
          - default
          - net-std
          - net-async-std
          - net-tokio
          - net-tokio,socket2
          - net-smol
    steps:
      - id: find_miri
        run: |
          MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
          echo "Found miri at: $MIRI_NIGHTLY"
          echo "miri=$MIRI_NIGHTLY" >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.find_miri.outputs.miri }}
          override: true
          components: miri, rust-src, rustfmt

      - uses: actions-rs/cargo@v1
        name: miri
        if: ${{ matrix.feature != 'all' && matrix.feature != '' }}
        with:
          command: miri
          args: test --no-default-features --features ${{ matrix.feature }}

      - uses: actions-rs/cargo@v1
        name: miri all
        if: ${{ matrix.feature == 'all' }}
        with:
          command: miri
          args: test --all-features

      - uses: actions-rs/cargo@v1
        name: miri no-default-features
        if: ${{ matrix.feature == '' }}
        with:
          command: miri
          args: test --no-default-features
